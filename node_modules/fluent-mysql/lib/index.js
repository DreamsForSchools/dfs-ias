"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//This is the only dependency for this module.
var mysql = require('mysql');
/**
 * @class Database
 * 
 * Mysql Database class 
 *  
 * @property {Object} connection
 * @property {object} pool
 * @property {string} tableName
 * @property {array}  whereArray
 * @property {array}  orWhereArray
 * @property {array} whereBetweenArray
 * @property {array} orWhereBetweenArray
 * @property {array} whereNotBetweenArray
 * @property {array} orWhereNotBetweenArray
 * @property {array} whereInArray
 * @property {array} whereNotInArray
 * @property {array} orWhereInArray
 * @property {array} orwhereNotInArray
 * @property {array} whereNullArray
 * @property {array} orWhereNullArray
 * @property {array} whereNotNullArray
 * @property {array} orWhereNotNullArray
 * @property {array|string} selections
 * @property {string} distinctClause
 * @property {number} findId
 * @property {string} orderType
 * @property {string} orderColumn
 * @property {boolean} fetchFirst
 * @property {boolean} existsQuery
 * @property {array} joins
 * @property {array} leftJoins
 * @property {array} rightJoins
 * @property {string} groupByColumn
 * @property {array} havingArray
 * @property {number} limitNumber
 * @property {number} offsetNumber
 * @property {boolean} hasCount
 */


var Database = function Database() {
  var _this = this;

  _classCallCheck(this, Database);

  _defineProperty(this, "connect", function (params) {
    return new Promise(function (resolve, reject) {
      _this.createConnection(params);

      _this.connection.connect(function (err) {
        if (err) {
          reject(err.stack);
        }

        resolve({
          message: 'Connected to MySql Database',
          success: true
        });
      });
    });
  });

  _defineProperty(this, "createConnection", function (params) {
    var connection = mysql.createConnection(params);
    _this.connection = connection;
  });

  _defineProperty(this, "end", function () {
    _this.connection.end();
  });

  _defineProperty(this, "createPool", function (params) {
    var pool = mysql.createPool(params);
    _this.pool = pool;
  });

  _defineProperty(this, "getPoolConnection", function () {
    var self = _this;
    return new Promise(function (resolve, reject) {
      self.pool.getConnection(function (err, connection) {
        if (err) {
          reject(err);
        }

        self.connection = connection;
        resolve(connection);
      });
    });
  });

  _defineProperty(this, "releasePool", function () {
    _this.connection.release();
  });

  _defineProperty(this, "getJoinStatement", function () {
    var joinStatement = '';

    if (_this.tableName != null && _this.tableName != undefined && _this.joins.length) {
      for (var index = 0; index < _this.joins.length; index++) {
        joinStatement += ' INNER JOIN ' + _this.joins[index][0] + ' ON ' + _this.joins[index][1] + ' ' + _this.joins[index][2] + ' ' + _this.joins[index][3] + ' ';
      }
    }

    if (_this.tableName != null && _this.tableName != undefined && _this.leftJoins.length) {
      for (var _index = 0; _index < _this.leftJoins.length; _index++) {
        joinStatement += ' LEFT JOIN ' + _this.leftJoins[_index][0] + ' ON ' + _this.leftJoins[_index][1] + ' ' + _this.leftJoins[_index][2] + ' ' + _this.leftJoins[_index][3] + ' ';
      }
    }

    if (_this.tableName != null && _this.tableName != undefined && _this.rightJoins.length) {
      for (var _index2 = 0; _index2 < _this.rightJoins.length; _index2++) {
        joinStatement += ' RIGHT JOIN ' + _this.rightJoins[_index2][0] + ' ON ' + _this.rightJoins[_index2][1] + ' ' + _this.rightJoins[_index2][2] + ' ' + _this.rightJoins[_index2][3] + ' ';
      }
    }

    return joinStatement;
  });

  _defineProperty(this, "getWhereStatement", function () {
    var whereStatement = '';

    if (_this.whereArray.length != 0) {
      whereStatement = ' WHERE ';

      for (var index = 0; index < _this.whereArray.length; index++) {
        var parts = _this.whereArray[index];
        whereStatement += parts[0] + ' ' + parts[1] + ' "' + parts[2] + '" ';

        if (index != _this.whereArray.length - 1) {
          whereStatement = whereStatement + ' AND ';
        }
      }
    }

    if (_this.whereBetweenArray.length != 0) {
      whereStatement = whereStatement == '' ? ' WHERE ' : whereStatement + ' AND ';

      for (var _index3 = 0; _index3 < _this.whereBetweenArray.length; _index3++) {
        var _parts = _this.whereBetweenArray[_index3];
        whereStatement += _parts[0] + ' BETWEEN ' + _parts[1] + ' AND ' + _parts[2];

        if (_index3 != _this.whereBetweenArray.length - 1) {
          whereStatement = whereStatement + ' AND ';
        }
      }
    }

    if (_this.whereNotBetweenArray.length != 0) {
      whereStatement = whereStatement == '' ? ' WHERE ' : whereStatement + ' AND ';

      for (var _index4 = 0; _index4 < _this.whereNotBetweenArray.length; _index4++) {
        var _parts2 = _this.whereNotBetweenArray[_index4];
        whereStatement += _parts2[0] + ' NOT BETWEEN ' + _parts2[1] + ' AND ' + _parts2[2];

        if (_index4 != _this.whereNotBetweenArray.length - 1) {
          whereStatement = whereStatement + ' AND ';
        }
      }
    }

    if (_this.whereInArray.length != 0) {
      whereStatement = whereStatement == '' ? ' WHERE ' : whereStatement + ' AND ';

      for (var _index5 = 0; _index5 < _this.whereInArray.length; _index5++) {
        var _parts3 = _this.whereInArray[_index5];

        var inValues = _parts3[1].map(function (x) {
          return "'" + x + "'";
        }).toString();

        whereStatement += _parts3[0] + ' IN( ' + inValues + ')';

        if (_index5 != _this.whereInArray.length - 1) {
          whereStatement = whereStatement + ' AND ';
        }
      }
    }

    if (_this.whereNotInArray.length != 0) {
      whereStatement = whereStatement == '' ? ' WHERE ' : whereStatement + ' AND ';

      for (var _index6 = 0; _index6 < _this.whereNotInArray.length; _index6++) {
        var _parts4 = _this.whereNotInArray[_index6];

        var _inValues = _parts4[1].map(function (x) {
          return "'" + x + "'";
        }).toString();

        whereStatement += _parts4[0] + ' NOT IN( ' + _inValues + ')';

        if (_index6 != _this.whereNotInArray.length - 1) {
          whereStatement = whereStatement + ' AND ';
        }
      }
    }

    if (_this.whereNullArray.length != 0) {
      whereStatement = whereStatement == '' ? ' WHERE ' : whereStatement + ' AND ';

      for (var _index7 = 0; _index7 < _this.whereNullArray.length; _index7++) {
        whereStatement += _this.whereNullArray[_index7] + ' IS NULL ';

        if (_index7 != _this.whereNullArray.length - 1) {
          whereStatement = whereStatement + ' AND ';
        }
      }
    }

    if (_this.whereNotNullArray.length != 0) {
      whereStatement = whereStatement == '' ? ' WHERE ' : whereStatement + ' AND ';

      for (var _index8 = 0; _index8 < _this.whereNotNullArray.length; _index8++) {
        whereStatement += _this.whereNotNullArray[_index8] + ' IS NOT NULL ';

        if (_index8 != _this.whereNotNullArray.length - 1) {
          whereStatement = whereStatement + ' AND ';
        }
      }
    }

    if (_this.orWhereArray.length != 0) {
      for (var _index9 = 0; _index9 < _this.orWhereArray.length; _index9++) {
        var _parts5 = _this.orWhereArray[_index9];
        whereStatement += ' OR ' + _parts5[0] + ' ' + _parts5[1] + ' "' + _parts5[2] + '" ';
      }
    }

    if (_this.orWhereBetweenArray.length != 0) {
      for (var _index10 = 0; _index10 < _this.orWhereBetweenArray.length; _index10++) {
        var _parts6 = _this.orWhereBetweenArray[_index10];
        whereStatement += ' OR ' + _parts6[0] + ' BETWEEN ' + _parts6[1] + ' AND ' + _parts6[2];
      }
    }

    if (_this.orWhereNotBetweenArray.length != 0) {
      for (var _index11 = 0; _index11 < _this.orWhereNotBetweenArray.length; _index11++) {
        var _parts7 = _this.orWhereNotBetweenArray[_index11];
        whereStatement += ' OR ' + _parts7[0] + ' NOT BETWEEN ' + _parts7[1] + ' AND ' + _parts7[2];
      }
    }

    if (_this.orWhereInArray.length != 0) {
      for (var _index12 = 0; _index12 < _this.orWhereInArray.length; _index12++) {
        var _parts8 = _this.orWhereInArray[_index12];

        var _inValues2 = _parts8[1].map(function (x) {
          return "'" + x + "'";
        }).toString();

        whereStatement += ' OR ' + _parts8[0] + ' IN( ' + _inValues2 + ')';
      }
    }

    if (_this.orWhereNotInArray.length != 0) {
      for (var _index13 = 0; _index13 < _this.orWhereNotInArray.length; _index13++) {
        var _parts9 = _this.orWhereNotInArray[_index13];

        var _inValues3 = _parts9[1].map(function (x) {
          return "'" + x + "'";
        }).toString();

        whereStatement += ' OR ' + _parts9[0] + ' NOT IN( ' + _inValues3 + ')';
      }
    }

    if (_this.orWhereNullArray.length != 0) {
      for (var _index14 = 0; _index14 < _this.orWhereNullArray.length; _index14++) {
        whereStatement += ' OR ' + _this.orWhereNullArray[_index14] + ' IS NULL ';
      }
    }

    if (_this.orWhereNotNullArray.length != 0) {
      for (var _index15 = 0; _index15 < _this.orWhereNotNullArray.length; _index15++) {
        whereStatement += ' OR ' + _this.orWhereNotNullArray[_index15] + ' IS NOT NULL ';
      }
    } // If selection is done with id


    if (_this.findId != null) {
      whereStatement = ' WHERE id = ' + _this.findId;
    }

    return whereStatement;
  });

  _defineProperty(this, "getGroupByStatement", function () {
    var groupByStatement = '';

    if (_this.groupByColumn != null) {
      groupByStatement += ' GROUP BY ' + _this.groupByColumn;
    }

    return groupByStatement;
  });

  _defineProperty(this, "getHavingStatement", function () {
    var havingStatement = '';

    if (_this.havingArray.length != 0) {
      havingStatement += ' HAVING ' + _this.havingArray[0] + ' ' + _this.havingArray[1] + ' "' + _this.havingArray[2] + '" ';
    }

    return havingStatement;
  });

  _defineProperty(this, "getOrderByStatement", function () {
    var orderByStatement = '';

    if (_this.orderType != null && _this.orderColumn != null) {
      orderByStatement = " ORDER BY ".concat(_this.orderColumn, " ").concat(_this.orderType, " ");
    }

    return orderByStatement;
  });

  _defineProperty(this, "getLimitStatement", function () {
    var limitStatement = '';

    if (_this.limitNumber != null) {
      limitStatement = " LIMIT ".concat(_this.limitNumber, " ");
    }

    return limitStatement;
  });

  _defineProperty(this, "getOffsetStatement", function () {
    var offsetStatement = '';

    if (_this.offsetNumber != null) {
      offsetStatement = " OFFSET ".concat(_this.offsetNumber, " ");
    }

    return offsetStatement;
  });

  _defineProperty(this, "getQueryStatement", function (action) {
    if (_this.selections != '*') {
      // Convert selections array to string
      _this.selections = _this.selections.toString();
    }

    var whereStatement = _this.getWhereStatement();

    var joinStatement = _this.getJoinStatement();

    var groupByStatement = _this.getGroupByStatement();

    var havingStatement = _this.getHavingStatement();

    var orderByStatement = _this.getOrderByStatement();

    var limitStatement = _this.getLimitStatement();

    var offsetStatement = _this.getOffsetStatement();

    var queryStatement;

    switch (action) {
      case 'get':
        queryStatement = "SELECT ".concat(_this.distinctClause, " ").concat(_this.selections, " FROM ").concat(_this.tableName, " ").concat(joinStatement, " ").concat(whereStatement, " ").concat(groupByStatement, " ").concat(havingStatement, " ").concat(orderByStatement, " ").concat(limitStatement, " ").concat(offsetStatement);
        break;

      case 'insert':
        queryStatement = "INSERT INTO  ".concat(_this.tableName, " SET ?");
        break;

      case 'insertOrUpdate':
        queryStatement = "INSERT INTO  ".concat(_this.tableName, " SET ? ON DUPLICATE KEY UPDATE ?");
        break;

      case 'update':
        queryStatement = "UPDATE ".concat(_this.tableName, " SET ? ").concat(whereStatement);
        break;

      case 'delete':
        queryStatement = "DELETE FROM ".concat(_this.tableName, "  ").concat(whereStatement);

      default:
        break;
    }

    return queryStatement;
  });

  _defineProperty(this, "get", function () {
    var existsQuery = _this.existsQuery;
    var fetchFirst = _this.fetchFirst;
    var hasCount = _this.hasCount;
    var findId = _this.findId;
    var connection = _this.pool !== null ? _this.pool : _this.connection;
    var self = _this;
    return new Promise(function (resolve, reject) {
      connection.query(_this.getQueryStatement('get'), function (error, results, fields) {
        if (error) reject(error); // if exists() method is used

        if (existsQuery) {
          resolve(self.json(results[0].count) > 0);
        } else {
          // Only get first result
          if (fetchFirst == true || findId != null) {
            resolve(results.length ? self.json(results[0]) : self.json(results));
          }

          if (hasCount == true) {
            resolve(self.json(results[0].count));
          } else {
            resolve(self.json(results));
          }
        }
      });

      _this.setPropertiesToDefault();
    });
  });

  _defineProperty(this, "insert", function (params) {
    var connection = _this.pool !== null ? _this.pool : _this.connection;
    var self = _this;
    return new Promise(function (resolve, reject) {
      connection.query(_this.getQueryStatement('insert'), params, function (error, results, fields) {
        if (error) reject(error);
        resolve(self.json(results));
      });

      _this.setPropertiesToDefault();
    });
  });

  _defineProperty(this, "insertOrUpdate", function (params) {
    var connection = _this.pool !== null ? _this.pool : _this.connection;
    var self = _this;
    return new Promise(function (resolve, reject) {
      connection.query(_this.getQueryStatement('insertOrUpdate'), [params, params], function (error, results, fields) {
        if (error) reject(error);
        resolve(self.json(results));
      });

      _this.setPropertiesToDefault();
    });
  });

  _defineProperty(this, "update", function (params) {
    var connection = _this.pool !== null ? _this.pool : _this.connection;
    var self = _this;
    return new Promise(function (resolve, reject) {
      console.log(_this.getQueryStatement('update'));
      connection.query(_this.getQueryStatement('update'), params, function (error, results, fields) {
        if (error) reject(error);
        resolve(self.json(results));
      });

      _this.setPropertiesToDefault();
    });
  });

  _defineProperty(this, "delete", function () {
    var connection = _this.pool !== null ? _this.pool : _this.connection;
    var self = _this;
    return new Promise(function (resolve, reject) {
      connection.query(_this.getQueryStatement('delete'), function (error, results, fields) {
        if (error) reject(error);
        resolve(self.json(results));
      });

      _this.setPropertiesToDefault();
    });
  });

  _defineProperty(this, "query", function (queryStatement) {
    var self = _this;
    var connection = _this.pool !== null ? _this.pool : _this.connection;
    return new Promise(function (resolve, reject) {
      connection.query(queryStatement, function (error, results, fields) {
        if (error) reject(error);
        resolve(self.json(results));
      });

      _this.setPropertiesToDefault();
    });
  });

  _defineProperty(this, "table", function (tableName) {
    if (tableName) {
      _this.tableName = tableName;
    }

    return _this;
  });

  _defineProperty(this, "select", function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length) {
      _this.selections = args;
    }

    return _this;
  });

  _defineProperty(this, "distinct", function () {
    _this.distinctClause = ' DISTINCT ';
    return _this;
  });

  _defineProperty(this, "where", function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (args.length) {
      _this.whereArray.push(args);
    }

    return _this;
  });

  _defineProperty(this, "orWhere", function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    if (args.length) {
      _this.orWhereArray.push(args);
    }

    return _this;
  });

  _defineProperty(this, "whereBetween", function () {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    if (args.length) {
      _this.whereBetweenArray.push(args);
    }

    return _this;
  });

  _defineProperty(this, "orWhereBetween", function () {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    if (args.length) {
      _this.orWhereBetweenArray.push(args);
    }

    return _this;
  });

  _defineProperty(this, "whereNotBetween", function () {
    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }

    if (args.length) {
      _this.whereNotBetweenArray.push(args);
    }

    return _this;
  });

  _defineProperty(this, "orWhereNotBetween", function () {
    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }

    if (args.length) {
      _this.orWhereNotBetweenArray.push(args);
    }

    return _this;
  });

  _defineProperty(this, "whereIn", function () {
    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }

    if (args.length) {
      _this.whereInArray.push(args);
    }

    return _this;
  });

  _defineProperty(this, "orWhereIn", function () {
    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
      args[_key9] = arguments[_key9];
    }

    if (args.length) {
      _this.orWhereInArray.push(args);
    }

    return _this;
  });

  _defineProperty(this, "whereNotIn", function () {
    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
      args[_key10] = arguments[_key10];
    }

    if (args.length) {
      _this.whereNotInArray.push(args);
    }

    return _this;
  });

  _defineProperty(this, "orWhereNotIn", function () {
    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
      args[_key11] = arguments[_key11];
    }

    if (args.length) {
      _this.orWhereNotInArray.push(args);
    }

    return _this;
  });

  _defineProperty(this, "whereNull", function (column) {
    _this.whereNullArray.push(column);

    return _this;
  });

  _defineProperty(this, "orWhereNull", function (column) {
    _this.orWhereNullArray.push(column);

    return _this;
  });

  _defineProperty(this, "whereNotNull", function (column) {
    _this.whereNotNullArray.push(column);

    return _this;
  });

  _defineProperty(this, "orWhereNotNull", function (column) {
    _this.orWhereNotNullArray.push(column);

    return _this;
  });

  _defineProperty(this, "find", function (id) {
    if (id) {
      _this.findId = id;
    }

    return _this.get();
  });

  _defineProperty(this, "orderBy", function (column, orderType) {
    if (['asc', 'desc', 'ASC', 'DESC'].includes(orderType)) {
      _this.orderType = orderType;
      _this.orderColumn = column;
    }

    return _this;
  });

  _defineProperty(this, "first", function () {
    _this.fetchFirst = true;
    return _this.get();
  });

  _defineProperty(this, "count", function () {
    _this.hasCount = true;
    _this.selections = ' COUNT(*) as count ';
    return _this.get();
  });

  _defineProperty(this, "exists", function () {
    _this.existsQuery = true;
    return _this.count();
  });

  _defineProperty(this, "join", function () {
    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
      args[_key12] = arguments[_key12];
    }

    _this.joins.push(args);

    return _this;
  });

  _defineProperty(this, "leftJoin", function () {
    for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
      args[_key13] = arguments[_key13];
    }

    _this.leftJoins.push(args);

    return _this;
  });

  _defineProperty(this, "rightJoin", function () {
    for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
      args[_key14] = arguments[_key14];
    }

    _this.rightJoins.push(args);

    return _this;
  });

  _defineProperty(this, "groupBy", function (column) {
    _this.groupByColumn = column;
    return _this;
  });

  _defineProperty(this, "having", function () {
    for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
      args[_key15] = arguments[_key15];
    }

    if (args.length) {
      _this.havingArray = args;
    }

    return _this;
  });

  _defineProperty(this, "limit", function (limitCount) {
    _this.limitNumber = limitCount;
    return _this;
  });

  _defineProperty(this, "offset", function (offsetCount) {
    _this.offsetNumber = offsetCount;
    return _this;
  });

  _defineProperty(this, "avg", function (column) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : column;

    if (_typeof(_this.selections) == 'object') {
      _this.selections.push(" AVG(".concat(column, ") AS ").concat(name, " "));
    } else {
      _this.selections = [" AVG(".concat(column, ") AS ").concat(name)];
    }

    return _this.get();
  });

  _defineProperty(this, "max", function (column) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : column;

    if (_typeof(_this.selections) == 'object') {
      _this.selections.push(" MAX(".concat(column, ") AS ").concat(name, " "));
    } else {
      _this.selections = [" MAX(".concat(column, ") AS ").concat(name)];
    }

    return _this.get();
  });

  _defineProperty(this, "min", function (column) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : column;

    if (_typeof(_this.selections) == 'object') {
      _this.selections.push(" MIN(".concat(column, ") AS ").concat(name, " "));
    } else {
      _this.selections = [" MIN(".concat(column, ") AS ").concat(name)];
    }

    return _this.get();
  });

  _defineProperty(this, "sum", function (column) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : column;

    if (_typeof(_this.selections) == 'object') {
      _this.selections.push(" SUM(".concat(column, ") AS ").concat(name, " "));
    } else {
      _this.selections = [" SUM(".concat(column, ") AS ").concat(name)];
    }

    return _this.get();
  });

  _defineProperty(this, "setPropertiesToDefault", function () {
    _this.tableName = null;
    _this.whereArray = [];
    _this.orWhereArray = [];
    _this.whereBetweenArray = [];
    _this.orWhereBetweenArray = [];
    _this.whereNotBetweenArray = [];
    _this.orWhereNotBetweenArray = [];
    _this.whereInArray = [];
    _this.whereNotInArray = [];
    _this.orWhereInArray = [];
    _this.orWhereNotInArray = [];
    _this.whereNullArray = [];
    _this.orWhereNullArray = [];
    _this.whereNotNullArray = [];
    _this.orWhereNotNullArray = [];
    _this.selections = '*';
    _this.distinctClause = '';
    _this.findId = null;
    _this.orderType = null;
    _this.orderColumn = null;
    _this.fetchFirst = false;
    _this.existsQuery = false;
    _this.joins = [];
    _this.leftJoins = [];
    _this.rightJoins = [];
    _this.groupByColumn = null;
    _this.havingArray = [];
    _this.limitNumber = null;
    _this.offsetNumber = null;
    _this.hasCount = false;
  });

  _defineProperty(this, "json", function (res) {
    if (_typeof(res) == 'object') {
      return JSON.parse(JSON.stringify(res));
    } else {
      return res;
    }
  });

  this.connection = null;
  this.pool = null;
  this.setPropertiesToDefault();
}
/**
 * First function to connect database
 * 
 * The parameters are the same with mysql library.
 * 
 * @link https://www.npmjs.com/package/mysql#connection-options
 * 
 * @param {Object} params
 * @return {Object} - Promise
 */
;

module.exports = new Database();